{
  "input": "char **ap, *argv[10], *inputstring;for (ap = argv; (*ap = strsep(&inputstring, \" \\t\")) != NULL;)\nif (**ap != '\\0')if (++ap >= &argv[10])break;\n\n\n\n/.../free(ap[4]);",
  "output": "This program snippet has a vulnerability.This code attempts to tokenize a string and place it into an array using the strsep function, which inserts a \\0 byte in place of whitespace or a tab character. After finishing the loop, each string in the AP array points to a location within the input string.Since strsep is not allocating any new memory, freeing an element in the middle of the array is equivalent to free a pointer in the middle of inputstring."
}
{
  "input": "void foo(){\nBarObj *ptr = new BarObj()\n/* do some work with ptr here */\n\n...\nfree(ptr);\n}",
  "output": "This program snippet has a vulnerability.This example allocates a BarObj object using the new operator in C++, however, the programmer then deallocates the object using free(), which may lead to unexpected behavior.Instead, the programmer should have either created the object with one of the malloc family functions, or else deleted the object with the delete operator."
}
{
  "input": "#define SUCCESS (1)#define FAILURE (0)\nint contains_char(char c){\nchar *str;str = (char*)malloc(20*sizeof(char));strcpy(str, \"Search Me!\");while( *str != NULL){\nif( *str == c ){\n\n\n/* matched char, free string and return success */\nfree(str);return SUCCESS;\n}\n/* didn't match yet, increment pointer and try next char */\n\nstr = str + 1;\n}\n/* we did not match the char in the string, free mem and return failure */\n\nfree(str);return FAILURE;\n}",
  "output": "This program snippet has a vulnerability.In this example, the programmer dynamically allocates a buffer to hold a string and then searches for a specific character. After completing the search, the programmer attempts to release the allocated memory and return SUCCESS or FAILURE to the caller. Note: for simplification, this example uses a hard-coded \"Search Me!\" string and a constant string length of 20.However, if the character is not at the beginning of the string, or if it is not in the string at all, then the pointer will not be at the start of the buffer when the programmer frees it.Instead of freeing the pointer in the middle of the buffer, the programmer can use an indexing pointer to step through the memory or abstract the memory calculations by using array indexing."
}
{
  "input": "//hardcode input length for simplicity\nchar* input = (char*) malloc(40*sizeof(char));char *tok;char* sep = \" \\t\";\nget_user_input( input );\n\n/* The following loop will parse and process each token in the input string */\n\ntok = strtok( input, sep);while( NULL != tok ){\nif( isMalformed( tok ) ){\n\n\n/* ignore and discard bad data */\nfree( tok );\n}else{add_to_command_queue( tok );}tok = strtok( NULL, sep));\n}",
  "output": "This program snippet has a vulnerability.Consider the following code in the context of a parsing application to extract commands out of user data. The intent is to parse each command and add it to a queue of commands to be executed, discarding each malformed entry.While the above code attempts to free memory associated with bad commands, since the memory was all allocated in one chunk, it must all be freed together.One way to fix this problem would be to copy the commands into a new memory location before placing them in the queue. Then, after all commands have been processed, the memory can safely be freed."
}
